const START_GAME = 'start game'
const SET_VALUE = 'setValue'

export const startGame = () => {
    return {
        type: START_GAME
    }
}

export const setValue = (value, indexArr) => {
    return {
        type: SET_VALUE,
        value,
        indexArr
    }
}

const data = {
    selectMatrix() {
        return Math.floor(Math.random() * this.dataMatrix.length)
    },
    dataMatrix: [
        // [
        //     [
        //         [9, 7, 1, 3, 4, 6, 8, 2, 5],
        //         [3, 5, 2, 9, 1, 8, 7, 4, 6],
        //         [8, 4, 6, 5, 2, 7, 3, 1, 9],
        //         [4, 1, 8, 2, 5, 3, 6, 9, 7],
        //         [6, 2, 3, 1, 7, 9, 4, 5, 8],
        //         [7, 9, 5, 8, 6, 4, 1, 3, 2],
        //         [1, 8, 7, 4, 9, 2, 5, 6, 3],
        //         [2, 6, 4, 7, 3, 5, 9, 8, 1],
        //         [5, 3, 9, 6, 8, 1, 2, 7, 4]
        //     ],
        //     [
        //         [9, 0, 0, 0, 4, 0, 0, 2, 5],
        //         [3, 0, 2, 9, 0, 8, 7, 0, 0],
        //         [0, 4, 0, 5, 0, 0, 0, 1, 0],
        //         [0, 1, 0, 2, 0, 3, 6, 9, 0],
        //         [6, 0, 0, 0, 7, 0, 0, 0, 8],
        //         [0, 9, 5, 8, 0, 4, 0, 3, 0],
        //         [0, 8, 0, 0, 0, 2, 0, 6, 0],
        //         [0, 0, 4, 7, 0, 5, 9, 0, 1],
        //         [5, 3, 0, 0, 8, 0, 0, 0, 4]
        //     ]
        // ],
        // [
        //     [
        //         [5, 4, 3, 1, 2, 8, 6, 7, 9],
        //         [6, 1, 2, 9, 4, 7, 3, 8, 5],
        //         [9, 8, 7, 5, 3, 6, 1, 2, 4],
        //         [7, 5, 8, 4, 9, 1, 2, 6, 3],
        //         [3, 2, 4, 8, 6, 5, 7, 9, 1],
        //         [1, 6, 9, 3, 7, 2, 5, 4, 8],
        //         [2, 3, 1, 6, 8, 9, 4, 5, 7],
        //         [4, 9, 6, 7, 5, 3, 8, 1, 2],
        //         [8, 7, 5, 2, 1, 4, 9, 3, 6]
        //     ],
        //     [
        //         [5, 0, 3, 1, 0, 0, 6, 0, 0],
        //         [0, 1, 0, 9, 0, 7, 0, 8, 0],
        //         [0, 0, 7, 0, 3, 6, 0, 2, 4],
        //         [7, 0, 8, 4, 0, 0, 0, 0, 3],
        //         [0, 2, 0, 0, 0, 0, 0, 9, 0],
        //         [1, 0, 0, 0, 0, 2, 5, 0, 8],
        //         [2, 3, 0, 6, 8, 0, 4, 0, 0],
        //         [0, 9, 0, 7, 0, 3, 0, 1, 0],
        //         [0, 0, 5, 0, 4, 9, 0, 0, 6]
        //     ]
        // ],
        // [
        //     [
        //         [2, 9, 5, 6, 8, 3, 4, 7, 1],
        //         [3, 1, 6, 9, 4, 7, 2, 5, 8],
        //         [4, 8, 7, 1, 5, 2, 3, 6, 9],
        //         [9, 2, 1, 5, 7, 4, 6, 8, 3],
        //         [8, 7, 3, 2, 9, 6, 1, 4, 5],
        //         [6, 5, 4, 3, 1, 8, 9, 2, 7],
        //         [7, 6, 8, 4, 3, 1, 5, 9, 2],
        //         [5, 3, 2, 8, 6, 9, 7, 1, 4],
        //         [1, 4, 9, 7, 2, 5, 8, 3, 6]
        //     ],
        //     [
        //         [0, 0, 0, 0, 0, 0, 0, 0, 1],
        //         [0, 0, 6, 9, 4, 0, 2, 0, 0],
        //         [0, 0, 0, 0, 5, 0, 3, 0, 0],
        //         [9, 0, 1, 0, 0, 0, 0, 8, 0],
        //         [8, 7, 0, 0, 0, 0, 0, 4, 5],
        //         [0, 5, 0, 0, 0, 0, 9, 0, 7],
        //         [0, 0, 8, 0, 3, 0, 0, 0, 0],
        //         [0, 0, 2, 0, 6, 9, 7, 0, 0],
        //         [1, 0, 0, 0, 0, 0, 0, 0, 0]
        //     ]
        // ]
        [
            [
                [2, 9, 5, 6, 8, 3, 4, 7, 1],
                [3, 1, 6, 9, 4, 7, 2, 5, 8],
                [4, 8, 7, 1, 5, 2, 3, 6, 9],
                [9, 2, 1, 5, 7, 4, 6, 8, 3],
                [8, 7, 3, 2, 9, 6, 1, 4, 5],
                [6, 5, 4, 3, 1, 8, 9, 2, 7],
                [7, 6, 8, 4, 3, 1, 5, 9, 2],
                [5, 3, 2, 8, 6, 9, 7, 1, 4],
                [1, 4, 9, 7, 2, 5, 8, 3, 6]
            ],
            [
                [0, 9, 5, 6, 8, 3, 4, 7, 1],
                [3, 1, 6, 9, 4, 7, 2, 5, 8],
                [4, 8, 7, 1, 5, 2, 3, 6, 9],
                [9, 2, 1, 5, 7, 4, 6, 8, 3],
                [8, 7, 3, 2, 9, 6, 1, 4, 5],
                [6, 5, 4, 3, 1, 8, 9, 2, 7],
                [7, 6, 8, 4, 3, 1, 5, 9, 2],
                [5, 3, 2, 8, 6, 9, 7, 1, 4],
                [1, 4, 9, 7, 2, 5, 8, 3, 6]
            ],
        ]
    ],
}

const randomSelectState = (data) => {
    let rndData = data.selectMatrix()
    return {
        matrix: {
            start: JSON.parse(JSON.stringify(data.dataMatrix[rndData][1])),
            end: data.dataMatrix[rndData][0]
        },
        dataValues: [1, 2, 3, 4, 5, 6, 7, 8, 9],
        errors: 0
    }
}

const reducer = (state = randomSelectState(data), action = startGame()) => {
    switch (action.type) {
        case START_GAME:
            return randomSelectState(data)
        case SET_VALUE:
            const newState = {
                ...state,
                matrix: {
                    ...state.matrix,
                    start: [...state.matrix.start]
                }
            }
            let value = +action.value
            if (state.matrix.end[action.indexArr[0]][action.indexArr[1]] === value) {
                newState.matrix.start[action.indexArr[0]][action.indexArr[1]] = value
            }else {
                newState.errors++
            }
            return newState
    }
}

export default reducer

